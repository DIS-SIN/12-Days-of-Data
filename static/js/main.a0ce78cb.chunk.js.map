{"version":3,"sources":["NoPeeking.js","Flap.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["NoPeeking","props","useState","classes","setClasses","close","setTimeout","setError","exists","useEffect","className","onClick","tabIndex","error","day","Flap","checkDate","Date","now","data-day","ev","console","log","target","getAttribute","openContent","Content","contentIsOpen","App","days","Array","from","length","v","k","Fragment","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAGe,SAASA,EAAUC,GAAQ,IAAD,EAEPC,mBAAS,wBAFF,mBAE9BC,EAF8B,KAErBC,EAFqB,KAQrC,SAASC,IACLD,EAAW,wBACXE,YAAW,WACPL,EAAMM,SAAS,CAACC,QAAO,MACxB,KAGP,OAXAC,qBAAU,WACNL,EAAW,qBACb,IAUE,yBAAKM,UAAU,YAAYC,QAASN,GAChC,yBAAKK,UAAWP,GACZ,6BACI,2CACA,uBAAGO,UAAU,uBAAuBE,SAAS,IAAID,QAASN,GAA1D,UAEJ,kEAAoCJ,EAAMY,MAAMC,IAAhD,+BCKDC,MA3Bf,SAAcd,GAeV,SAASe,IACL,OAAOC,KAAKC,OAAS,IAAID,KAAJ,mBAAqB,EAAIhB,EAAMa,IAAM,EAArC,WAGzB,OACI,yBAAKJ,UAAU,OAAOS,WAAUlB,EAAMa,IAAKH,QAlB/C,SAAcS,GACNJ,KACAK,QAAQC,IAAI,eAAgBF,EAAGG,OAAOC,aAAa,aACnDvB,EAAMwB,aAAY,IAGlBxB,EAAMM,SAAS,CACXC,QAAQ,EACRM,IAAK,EAAIb,EAAMa,IAAM,KAU6BF,SAAS,KAC/D,2BAAIX,EAAMa,KACV,uBAAGJ,UAAU,uBAAuBM,IAAc,YAAc,UCtB7D,SAASU,EAAQzB,GAE5B,OACI,yBAAKS,UAAWT,EAAM0B,cAAgB,eAAiB,WACnD,4BAAQjB,UAAU,mCAAmCC,QAAS,kBAAMV,EAAMwB,aAAY,IAAQb,SAAS,KAAvG,UCmBGgB,MApBf,WAAgB,IAAD,EAE0B1B,oBAAS,GAFnC,mBAEJyB,EAFI,KAEWF,EAFX,OAGevB,mBAAS,CAC/BM,QAAQ,IAJD,mBAGJK,EAHI,KAGGN,EAHH,KAOLsB,EAAOC,MAAMC,KAAK,CAACC,OAAQ,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,KAElD,OACI,kBAAC,IAAMC,SAAP,KACKtB,EAAML,OAAS,kBAACR,EAAD,CAAWa,MAAOA,EAAON,SAAUA,IAAc,KACjE,yBAAKG,UAAU,YACVmB,EAAKO,KAAI,SAAAtB,GAAG,OAAI,kBAAC,EAAD,CAAMuB,IAAKvB,EAAKA,IAAKA,EAAKW,YAAaA,EAAalB,SAAUA,OAC/E,kBAACmB,EAAD,CAASC,cAAeA,EAAeF,YAAaA,OCRhDa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a0ce78cb.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nexport default function NoPeeking(props) {\n\n    const [classes, setClasses] = useState(\"noPeekingWindow hide\");\n\n    useEffect(() => {\n        setClasses(\"noPeekingWindow\");\n    },[]);\n\n    function close() {\n        setClasses(\"noPeekingWindow hide\");\n        setTimeout(() => {\n            props.setError({exists:false});\n        }, 500);\n    }\n\n    return (\n        <div className=\"noPeeking\" onClick={close}>\n            <div className={classes}>\n                <div>\n                    <h4>No Peeking!</h4>\n                    <i className=\"material-icons close\" tabIndex=\"0\" onClick={close}>close</i>\n                </div>\n                <p>{`Please come back on December ${props.error.day}th to view this content.`}</p>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\n\nfunction Flap(props) {\n\n    function open(ev) {\n        if (checkDate()){\n            console.log(\"Opening Day \", ev.target.getAttribute(\"data-day\"));\n            props.openContent(true);\n        }\n        else {\n            props.setError({\n                exists: true,\n                day: 5 + props.day - 1\n            });\n        }\n    }\n\n    function checkDate() {\n        return Date.now() >= new Date(`December ${5 + props.day - 1}, 2019`);\n    }\n\n    return (\n        <div className=\"flap\" data-day={props.day} onClick={open} tabIndex=\"1\">\n            <p>{props.day}</p>\n            <i className=\"material-icons lock\">{checkDate() ? \"lock_open\" : \"lock\"}</i>\n        </div>\n    );\n}\n\nexport default Flap;\n","import React from 'react';\nimport './App.css';\n\nexport default function Content(props) {\n\n    return (\n        <div className={props.contentIsOpen ? \"content open\" : \"content\"}>\n            <button className=\"closeButton material-icons close\" onClick={() => props.openContent(false)} tabIndex=\"0\">close</button>\n        </div>\n    );\n}\n","import React, {useState} from 'react';\nimport NoPeeking from './NoPeeking';\nimport Flap from './Flap';\nimport Content from './Content';\nimport './App.css';\n\nfunction App() {\n\n    const [contentIsOpen, openContent] = useState(false);\n    const [error, setError] = useState({\n        exists: false\n    })\n\n    const days = Array.from({length: 12}, (v, k) => k+1);\n\n    return (\n        <React.Fragment>\n            {error.exists ? <NoPeeking error={error} setError={setError}/> : null}\n            <div className=\"calendar\">\n                {days.map(day => <Flap key={day} day={day} openContent={openContent} setError={setError}/>)}\n                <Content contentIsOpen={contentIsOpen} openContent={openContent}/>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}